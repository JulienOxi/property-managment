{% extends 'base.html.twig' %}

{% set pageName = 'Modifier une propriété' %}
{% block pageName %}{{ pageName }}{% endblock %}
{% block title %}{{ pageName }}{% endblock %}

{% block body %}
    <div class="flex items-center justify-center min-h-screen bg-gray-100">
        <div class="w-full max-w-2xl p-6 bg-white rounded-lg shadow-lg">
            <h1 class="text-xl font-semibold text-center text-gray-800 mb-5 md:text-2xl">{{property.type.name}} - {{property.address.zipCode}} {{property.address.city}} </h1>

            <div class="bg-gray-50 p-4 rounded-md mb-6">
                {# <p class="text-gray-600">Veuillez remplir les informations ci-dessous :</p> #}
            </div>

            {{ include('property/_form.html.twig') }}

        </div>
    </div>

{% endblock %}

{% block javascripts %}
<script>

document.addEventListener("DOMContentLoaded", () => {

    const nameRegex = /^([A-Z]|[0-9]+)[-a-zA-ZÀ-ú\s]{2,100}$/;
    const descriptionRegex = /^([A-Z]|[0-9]+)[-a-zA-ZÀ-ú\s]{5,100000}$/;
    const ewidRegex = /^[0-9]{2,255}$/;
    const egidRegex = /^[0-9]{2,255}$/;
    const tauxHypoRegex = /^(10(?:[.,]0{1,2})?|[0-9](?:[.,][0-9]{1,2})?)$/;
    const purchasePriceRegex = /^(10(?:[.,]0{1,2})?|[0-9](?:[0-9']{0,2}(?:[0-9]{3})?)*(?:[.,][0-9]{1,2})?)$/;
    const priceRegex = /^(10(?:[.,]0{1,2})?|[0-9]{1,4}(?:[.,][0-9]{1,2})?)$/;
    const cityRegex = /^[A-Z][-a-zA-ZÀ-ú\s]{2,100}$/;
    const streetRegex = /^[A-Z][-a-zA-ZÀ-ú\s]{2,255}$/;
    const streetNumberRegex = /^[A-Z][-a-zA-ZÀ-ú\s]{1,10}$/;
    const zipCodeRegex = /^\d{4}$/;

    validateInput('property_name', nameRegex, false)
    validateInput('property_description', descriptionRegex, false)
    validateInput('property_EWID', ewidRegex, false)
    validateInput('property_EGID', egidRegex, false)

    validateInput('property_mortgageRate', tauxHypoRegex, false)
    validateInput('property_purchasePrice', purchasePriceRegex, false)
    validateInput('property_ownerChargesDepositAmount', priceRegex)


    validateInput('property_address_street', streetRegex)
    validateInput('property_address_streetNumber', streetNumberRegex, false)
    validateInput('property_address_zipCode', zipCodeRegex, false)
    validateInput('property_address_city', cityRegex)


});
</script>

<script>
window.addEventListener("load", () => {
    document.getElementById("menu_btn_property").classList.add("menu-btn-active");
})
</script>

{# Toogle de l'input d'amortissement en fonction de la valeur du select #}
{# Si le select est différent de NOTHING, on active le champ d'amortissement, sinon on le désactive et on le vide. #}
<script>
document.addEventListener('change', function(e) {
    if (e.target.matches('select[id$="_amortizationType"]')) {
        const baseId = e.target.id.replace('_amortizationType', '');
        const amortizationPercentInput = document.getElementById(`${baseId}_amortizationPercent`);
        const amortizationAmountInput = document.getElementById(`${baseId}_amortizationAmount`);
        if (!amortizationPercentInput || !amortizationAmountInput) return;

        const selectedValue = e.target.value;

        if (selectedValue && selectedValue !== 'NOTHING') {
            amortizationPercentInput.disabled = false;
            amortizationAmountInput.disabled = false;

            // Enlever les valeurs pour forcer l'utilisateur à choisir une seule
            amortizationPercentInput.value = '';
            amortizationAmountInput.value = '';

            // Ajouter un gestionnaire d'événement pour forcer le choix unique
            const enforceSingleInput = () => {
                if (amortizationPercentInput.value) {
                    amortizationAmountInput.disabled = true;
                    amortizationAmountInput.required = false;
                } else {
                    amortizationAmountInput.disabled = false;
                }

                if (amortizationAmountInput.value) {
                    amortizationPercentInput.disabled = true;
                    amortizationPercentInput.required = false;
                } else {
                    amortizationPercentInput.disabled = false;
                }

                // Marquer au moins un comme required si les deux sont vides
                if (!amortizationPercentInput.value && !amortizationAmountInput.value) {
                    amortizationPercentInput.required = true;
                    amortizationAmountInput.required = true;
                }
            };

            amortizationPercentInput.addEventListener('input', enforceSingleInput);
            amortizationAmountInput.addEventListener('input', enforceSingleInput);

            enforceSingleInput(); // Initialiser l’état

        } else {
            amortizationPercentInput.disabled = true;
            amortizationPercentInput.required = false;
            amortizationPercentInput.value = '';

            amortizationAmountInput.disabled = true;
            amortizationAmountInput.required = false;
            amortizationAmountInput.value = '';
        }
    }
});
</script>

{% endblock %}


